{"version":3,"sources":["components/ButtonSign.js","components/Message.js","components/Channel.js","App.js","reportWebVitals.js","index.js"],"names":["ButtonSign","onClick","children","Button","basic","color","Message","createdAt","text","displayName","photoURL","List","divided","relaxed","Item","Image","avatar","src","alt","width","height","Content","Header","as","Description","seconds","formatRelative","Date","dividing","Channel","user","db","useState","messages","setMessages","newMessage","setNewMessage","uid","useEffect","collection","orderBy","limit","onSnapshot","querySnapshot","data","docs","map","doc","id","Container","textAlign","message","onSubmit","e","preventDefault","add","firebase","firestore","FieldValue","serverTimestamp","Input","type","value","onChange","target","placeholder","positive","disabled","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","auth","App","currentUser","setUser","initializing","setInitializing","onAuthStateChanged","signInWithGoogle","a","provider","GoogleAuthProvider","useDeviceLanguage","signInWithPopup","console","log","signInWithAnon","signInAnonymously","signOut","className","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.18a5632c.chunk.js","sourcesContent":["import React from 'react';\nimport { Button } from 'semantic-ui-react';\n//signin button\n\nconst ButtonSign = ({onClick=null, children=null}) =>(\n <Button basic color='black' onClick={onClick}>{children}</Button>\n);\n\nexport default ButtonSign;","import React from 'react';\nimport {formatRelative} from 'date-fns';\nimport { List, Image, Header } from 'semantic-ui-react'\n//this component is responsible to format and render the data\nconst Message=({\n    createdAt=null,\n    text='',\n    displayName='',\n    photoURL='',\n})=>{\n    return (\n    <List divided relaxed>\n        <List.Item>\n        {photoURL ? (\n            <Image avatar src={photoURL} alt=\"Avatar\" width={45} height={45}/>\n        ):null}\n            <List.Content>\n            <List.Header as='a'>{displayName ? <p>{displayName}</p>:null}</List.Header>\n            <List.Description as='a'>{createdAt?.seconds?(\n            <span>\n                {formatRelative (new Date(createdAt.seconds*1000),new Date())}\n            </span>\n            \n            ):null}\n            </List.Description>\n            <Header as='h3' dividing>\n            <p>{text}</p>\n            </Header>\n            </List.Content>\n        </List.Item>\n        </List>\n        );\n    };\n\nexport default Message;","import React, { useEffect, useState} from 'react';\nimport firebase from 'firebase/app';\nimport Message from './Message';\nimport { Input, Button, List, Container} from 'semantic-ui-react'\n\n\n\n\n\nconst Channel = ({ user = null, db=null }) => {\n  \n  const [messages, setMessages] = useState([]);\n  const [newMessage, setNewMessage] = useState('');\n  //we get this information from the parent company props\n  const {uid, displayName, photoURL} = user;\n\n\n\n\n  useEffect(() => {\n    if (db) {\n    //this is the collection from firebase\n    //its a listener\n      const unsubscribe = db.collection('messages').orderBy('createdAt').limit(100)\n      //we use this to get the messages in real time\n      .onSnapshot(querySnapshot => {\n          //get all documents from collection with ID's\n          const data = querySnapshot.docs.map(doc=>({...doc.data(),id:doc.id,}));\n          //update state\n          setMessages(data)\n      })\n      //detach the listener\n      return unsubscribe;\n    }\n}, [db]);\n\nconst handleOnChange = e => {\n    setNewMessage(e.target.value);\n  };\n\nconst handleOnSubmit = e => {\n    e.preventDefault();\n    //its adding the messages to our firebase database\n    if (db){\n        db.collection('messages').add({\n            text:newMessage,\n            createdAt: firebase.firestore.FieldValue.serverTimestamp(),\n            uid,\n            displayName,\n            photoURL,\n        })\n    }\n\n}\n\nreturn (\n    \n    <>\n    <List divided relaxed>\n        <Container textAlign='left'>\n        {messages.map(message => (\n            <li key={message.id}>\n                <Message {...message}/>\n            </li>\n        ))}\n        </Container>\n    </List>\n    <form onSubmit={handleOnSubmit}>\n        <Input\n        type=\"text\"\n        value={newMessage}\n        onChange={handleOnChange}\n        placeholder=\"Type your message here...\"/>\n        <Button positive type=\"submit\" disabled={!newMessage}>\n            Send\n        </Button>\n    </form>\n    </>\n    \n);\n};\n\nexport default Channel;\n\n\n","import React, { useEffect, useState } from 'react';\nimport '../src/App.css';\nimport firebase from 'firebase/app';\nimport 'firebase/firestore';\nimport 'firebase/auth';\nimport ButtonSign from './components/ButtonSign';\nimport Channel from './components/Channel';\nimport { Container, Header} from 'semantic-ui-react';\n\n\n\nfirebase.initializeApp({\n  apiKey: \"AIzaSyClQX2fsf-pFSig2cYBdY4ZIcDp71zGYfo\",\n  authDomain: \"react-firechat-5ae04.firebaseapp.com\",\n  projectId: \"react-firechat-5ae04\",\n  storageBucket: \"react-firechat-5ae04.appspot.com\",\n  messagingSenderId: \"237931249547\",\n  appId: \"1:237931249547:web:56cf555f4d6f9127d9398e\"\n});\n\nconst auth = firebase.auth();\nconst db = firebase.firestore();\n\nfunction App() {\n\n  const [user, setUser]  = useState(()=> auth.currentUser);\n  const [initializing, setInitializing] = useState(true);\n\n  //its a sideffect\n  useEffect(()=>{\n    const unsubscribe = auth.onAuthStateChanged(user=>{\n      if(user){\n        setUser(user);\n      }else{\n        setUser(null);\n      }\n\n     \n      if(initializing){\n        setInitializing(false);\n      }\n    });\n\n    //cleanup subsription\n    return unsubscribe;\n    //eslint-disable-next-line react-hooks/exhaustive-deps\n  },[])\n\n  if (initializing) return \"loading...\";\n\n    //if (user) return <Channel user={user} />;\n\n  const signInWithGoogle = async () => {\n    // Retrieve Google provider object\n    const provider = new firebase.auth.GoogleAuthProvider();\n    // Set language to the default browser preference\n    auth.useDeviceLanguage();\n    // Start sign in process\n    try {\n      await auth.signInWithPopup(provider);\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  const signInWithAnon = async () => {\n    try {\n      await auth.signInAnonymously();      \n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  //this is the signout button from firebase\n  const signOut = async () => {\n    try {\n      await firebase.auth().signOut();\n    } catch (error) {\n      console.log(error.message);\n    }\n  };\n\n\n\n  return (\n    <div className=\"wrapper\"> \n    <Container>\n      {user ? (\n        <Container textAlign='center'>\n          <ButtonSign onClick={signOut}>Sign Out </ButtonSign>\n          <Channel user={user} db={db}/>\n        </Container>\n      ):(\n        <Container textAlign='center'>\n          <Header as='h2'>Hi there! welcome to my chat</Header>\n          <p>Please sign in with your gmail account, or if\n          you prefer you can enter anonymously :)</p>\n        <ButtonSign onClick={signInWithGoogle}>Sign in with Google</ButtonSign>\n\n        <ButtonSign onClick={signInWithAnon}>Sign in anonymous</ButtonSign>\n        </Container>\n      )}\n    </Container>\n    </div>\n  );\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'semantic-ui-css/semantic.min.css'\n\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}