{"version":3,"sources":["components/Button.js","components/Message.js","components/Channel.js","App.js","reportWebVitals.js","index.js"],"names":["Button","onClick","children","Message","createdAt","text","displayName","photoURL","src","alt","width","height","seconds","formatRelative","Date","Channel","user","db","useState","messages","setMessages","newMessage","setNewMessage","uid","useEffect","collection","orderBy","limit","onSnapshot","querySnapshot","data","docs","map","doc","id","message","onSubmit","e","preventDefault","add","firebase","firestore","FieldValue","serverTimestamp","type","value","onChange","target","placeholder","disabled","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","auth","App","currentUser","setUser","initializing","setInitializing","onAuthStateChanged","signInWithGoogle","a","provider","GoogleAuthProvider","useDeviceLanguage","signInWithPopup","console","log","signOut","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.35461ceb.chunk.js","sourcesContent":["import React from 'react';\n//signin button\n//why children?\nconst Button = ({onClick=null, children=null}) =>(\n <button onClick={onClick}>{children}</button>\n);\n\nexport default Button;\n","import React from 'react';\nimport {formatRelative} from 'date-fns';\n//this component is responsible to format and render the data\nconst Message=({\n    createdAt=null,\n    text='',\n    displayName='',\n    photoURL='',\n})=>{\n    return (\n    <div>\n        {photoURL ? (\n            <img src={photoURL} alt=\"Avatar\" width={45} height={45}/>\n        ):null}\n        {displayName ? <p>{displayName}</p>:null}\n        {createdAt?.seconds?(\n            <span>\n                {formatRelative (new Date(createdAt.seconds*1000),new Date())}\n            </span>\n            ):null}\n            <p>{text}</p>\n        </div>\n        );\n    };\n\nexport default Message;","import React, { useEffect, useState} from 'react';\nimport PropTypes from 'prop-types';\nimport firebase from 'firebase/app';\nimport Message from './Message'\n\n\n\n\nconst Channel = ({ user = null, db=null }) => {\n  \n  const [messages, setMessages] = useState([]);\n  const [newMessage, setNewMessage] = useState('');\n  //we get this information from the parent company props\n  const {uid, displayName, photoURL} = user;\n\n\n\n\n  useEffect(() => {\n    if (db) {\n    //this is the collection from firebase\n    //its a listener\n      const unsubscribe = db.collection('messages').orderBy('createdAt').limit(100)\n      //we use this to get the messages in real time\n      .onSnapshot(querySnapshot => {\n          //get all documents from collection with ID's\n          const data = querySnapshot.docs.map(doc=>({...doc.data(),id:doc.id,}));\n          //update state\n          setMessages(data)\n      })\n      //detach the listener\n      return unsubscribe;\n    }\n}, [db]);\n\nconst handleOnChange = e => {\n    setNewMessage(e.target.value);\n  };\n\nconst handleOnSubmit = e => {\n    e.preventDefault();\n    //its adding the messages to our firebase database\n    if (db){\n        db.collection('messages').add({\n            text:newMessage,\n            createdAt: firebase.firestore.FieldValue.serverTimestamp(),\n            uid,\n            displayName,\n            photoURL,\n        })\n    }\n\n}\n\nreturn (\n    <>\n    <ul>\n        {messages.map(message => (\n            <li key={message.id}>\n                <Message {...message}/>\n            </li>\n        ))}\n    </ul>\n    <form onSubmit={handleOnSubmit}>\n        <input\n        type=\"text\"\n        value={newMessage}\n        onChange={handleOnChange}\n        placeholder=\"type your message here...\"/>\n        <button type=\"submit\" disabled={!newMessage}>\n            Send\n        </button>\n    </form>\n    </>\n);\n};\n\nexport default Channel;\n\n\n","import React, { useEffect, useState } from 'react';\nimport firebase from 'firebase/app';\nimport 'firebase/firestore';\nimport 'firebase/auth';\nimport Button from './components/Button';\nimport Channel from './components/Channel';\n\n\nfirebase.initializeApp({\n  apiKey: \"AIzaSyClQX2fsf-pFSig2cYBdY4ZIcDp71zGYfo\",\n  authDomain: \"react-firechat-5ae04.firebaseapp.com\",\n  projectId: \"react-firechat-5ae04\",\n  storageBucket: \"react-firechat-5ae04.appspot.com\",\n  messagingSenderId: \"237931249547\",\n  appId: \"1:237931249547:web:56cf555f4d6f9127d9398e\"\n});\n\nconst auth = firebase.auth();\nconst db = firebase.firestore();\n\nfunction App() {\n\n  const [user, setUser]  = useState(()=> auth.currentUser);\n  const [initializing, setInitializing] = useState(true);\n\n  //its a sideffect\n  useEffect(()=>{\n    const unsubscribe = auth.onAuthStateChanged(user=>{\n      if(user){\n        setUser(user);\n      }else{\n        setUser(null);\n      }\n      if(initializing){\n        setInitializing(false);\n      }\n    });\n\n    //cleanup subsription\n    return unsubscribe;\n  },[])\n\n  if (initializing) return \"loading...\";\n\n  //if (user) return <Channel user={user} />;\n\n  const signInWithGoogle = async () => {\n    // Retrieve Google provider object\n    const provider = new firebase.auth.GoogleAuthProvider();\n    // Set language to the default browser preference\n    auth.useDeviceLanguage();\n    // Start sign in process\n    try {\n      await auth.signInWithPopup(provider);\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  //this is the signout button from firebase\n  const signOut = async () => {\n    try {\n      await firebase.auth().signOut();\n    } catch (error) {\n      console.log(error.message);\n    }\n  };\n\n   \n\n\n  return (\n    <div>\n      {user ? (\n        <>\n          <Button onClick={signOut}>Sign Out </Button>\n          <Channel user={user} db={db}/>\n        </>\n      ):(\n        <Button onClick={signInWithGoogle}>Sign in with Google</Button>\n      )}\n    </div>\n  );\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}